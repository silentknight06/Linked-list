//////////////////////////////////// using map

Node *copyList(Node *head)
    {
   if(head==NULL) return {NULL};
        Node * temp=head;
        Node * clone=new Node(-1);
        Node * tail=clone;
        unordered_map<Node *, Node *> mp;
        while(temp){
            tail->next=new Node(temp->data);
            mp[temp]=tail->next;
            tail=tail->next;
            temp=temp->next;
        }
        temp=head;
        tail=clone->next;
        while(temp){
            tail->arb=mp[temp->arb];
            tail=tail->next;
            temp=temp->next;
        }
        return clone->next;
    }

////////////////////////////////////// usign pointer ////////////////////////////////
class Solution
{
    private:
        void insertAtTail(Node* &head, Node* &tail, int d){
            Node* newNode = new Node(d);
            if(head==NULL){
                head = newNode;
                tail = newNode;
                return;
            }
            else{
                tail ->next = newNode;
                tail = newNode;
            }
        }
    public:
    Node *copyList(Node *head)
    {
        // create a clone list
        Node* cloneHead = NULL;
        Node* cloneTail = NULL;
        Node* temp = head;
        while(temp!=NULL){
            insertAtTail(cloneHead,cloneTail,temp->data);
            temp = temp->next;
        }
        
        // clone nodes in add in between original list
        Node* original = head;
        Node* clone = cloneHead;
        while(original!=NULL && clone!=NULL){
            Node* nx = original->next;
            original->next=clone;
            original=nx;
            
            nx = clone->next;
            clone->next=original;
            clone=nx;
        }
        
        // random pointer copy
        temp = head;
        while(temp!=NULL){
            if(temp->next!=NULL){
                temp->next->arb=temp->arb? temp->arb->next:temp->arb;
            }
            temp = temp->next->next;
        }
        
        original = head;
        clone = cloneHead;
        
        while(original!=NULL && clone!=NULL){
            original ->next = clone->next;
            original = original -> next;
            if(original!=NULL){
                clone->next=original->next;
            }
            clone = clone->next;
        }
        return cloneHead;
    }
  

};
