// step 1 : find mid value and seperate in two part the LL
//step 2: reverse the second part
// step 3: merge the first and second part 
// finish;
TC: O(n);
SC: O(1);



class Solution {
public:
  ListNode* Reverse(ListNode* head)
{
ListNode* curr = head;
ListNode* prev = NULL;
ListNode* ptr = NULL;

    while(curr != NULL)
    {
        ptr = curr -> next;
        curr -> next = prev;
        prev = curr;
        curr = ptr;
    }
    return prev;
}

void reorderList(ListNode* head) 
{
    // Return Ans If Linked List is Empty OR Have only One Node
    if(head -> next == NULL || head -> next -> next == NULL)
    {     return;     }    

    ListNode* slow = head;
    ListNode* fast = head;
    ListNode* last = head;
    while(fast != NULL)
    {
        last = slow;
        slow = slow -> next;
        fast = fast -> next;
        if(fast != NULL)
        {   fast = fast -> next;  }
    }
    //Seperating First and Second Half
    last -> next = NULL;
    //Reversing Second Half
    ListNode* second = Reverse(slow);
    ListNode* first = head;

    //Merging First And Second Half of Linked List
    while(second)
    {
        ListNode* temp1 = first -> next;
        ListNode* temp2 = second -> next;

        first -> next = second;
        second -> next = temp1;

        second = temp2;
        first = temp1;
    }
}
};
