#include<vector>
class Solution {
public:
 
 Methord -> 1;
............... using vector T.C = O(n) and SC  = O(n);................................................................

// pahle vector me store me  rahe h iske bad ise reverse kar rahe h then phir use linked list me dal rahe h





    ListNode* reverseBetween(ListNode* head, int left, int right) {
        vector<int> vec;
        ListNode *temp = head;
        while(temp != NULL){
        vec.push_back(temp->val);
            temp = temp->next;
        }
            
         reverse(vec.begin()+left-1, vec.begin()+right);

           ListNode *root = NULL;
           for(int i = vec.size()-1; i>=0; i--){
                ListNode * temp = new ListNode();
                temp->val = vec[i];
                temp->next = root;
                root = temp;
           }
           return root;
          

    }
};


// Methord -> 2 
// using two pointer which is takes O(n) time and space O(1)  this is the iptimise verson.........................



class Solution {
public:
   ListNode* reverseBetween(ListNode* head, int m, int n) {
       ListNode *dummy = new ListNode(0), *pre = dummy, *cur;
       dummy -> next = head;
       for (int i = 0; i < m - 1; i++) {
           pre = pre -> next;
       }
       cur = pre -> next;
       for (int i = 0; i < n - m; i++) {
           ListNode* temp = pre -> next;
           pre -> next = cur -> next;
           cur -> next = cur -> next -> next;
           pre -> next -> next = temp;
       }
       return dummy -> next;
   }
};
